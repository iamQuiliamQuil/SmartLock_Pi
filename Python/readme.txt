This is the meat and potatoes.  

use command  
python3 Server.py  
(PEM pass phrase is password)
or run the file with an IDE like Thonny  

All .sh files need to be enabled for use by running 
chmod u+x FILENAME.sh 
in the appropriate directory. This should only need to done once per file

The server is a basic Python http listener. It's encrypted with the ssl package, and 
the keys for it were generated by running 
openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 365
in the command line. This generates a self-singed certificate, which is not what you would 
ideally want but was good enough for us for now. In order to connect to a server with 
self-singed certificates, you will need to either configure your setting to accept all
certificates or figure out how to make your system accept this certificate. We couldn't
figure out how to do the latter, so we did the former. Once again, sub-optimal. 

If an http(s) GET request is sent to the server, a new uuid will be sent in response. 
This was only meant to be a placeholder method of getting uuids until we could implement
bluetooth, but that never happened. A secure way of giving the user a uuid must be found.

http(s) post requests should be formatted as uuid~UUIDQrequest~FUNCTION_ARG0_ARG1_..._ARGN
We had an issue sending certain characters from the app to the Pi, which we once again 
did not find the time to fix. Instead we hacked this together. We are sorry. "~","Q", and "_"
are special characters, ~ was originally =, and Q was originally a space, as below.
uuid=UUID request=FUNCTION_ARG0_ARG1_..._ARGN
NOTE: this request would not work, I just think it aids in understanding. 
All requests need to have a valid uuid attached. 
almost all functions in hardware.py can be used in a post request, as can a couple of functions
in PostRequestHandler. Also, all functions have the first character in them cut off, 
because of the way that the app sends requests. This should also be changed. 
And example of a valid curl request, 
for hardware.capture(resolution, filetype) and uuid a56865eb-fe41-4708-a1c7-e82c3f038488,
curl -k -d \uuid~a56865eb-fe41-4708-a1c7-e82c3f038488Qrequest~capture_100x100_jpeg -X POST https://YOUR_IP_HERE:8000

PhoneNumberManager is not integrated with the rest of the project properly because the Server
doesn't remember anything between sessions yet, and therefore there isn't much useful to do with it. 
Some of our phone numbers are hard-coded into the project. We request that you use your own for your testing. 

There is a second script which we did not implement into the system and acts on its own  
doorbell.py  
this checks if buttons are pressed  
when the outside button is pressed a picture is taken and notification text is sent  
a doorbell noise is also played. the noise might not work.  
requires speaker (I played sound through a monitor with HDMI)
You need to restart the pi once before testing doorbell.py  
it works for every button press afterwards and will not need to be restarted again  
when the inside button is pressed, the lock will change  
the inside button was originally intended to be a button for pairing bluetooth
